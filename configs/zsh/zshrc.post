# Configurations depend on customized variables should be placed in here
# Add customized variables in ~/.*shrc.local

# set theme
set_theme $TERMINAL_THEME

# Proxy (V2Ray)
setproxy() {
    export https_proxy=http://$PROXY_IP
    export http_proxy=http://$PROXY_IP
    export all_proxy=http://$PROXY_IP
    export HTTPS_PROXY=http://$PROXY_IP
    export HTTP_PROXY=http://$PROXY_IP
    export ALL_PROXY=http://$PROXY_IP
}

unsetproxy() {
    unset https_proxy
    unset http_proxy
    unset all_proxy
    unset HTTPS_PROXY
    unset HTTP_PROXY
    unset ALL_PROXY
}

# setproxy
if [[ $PROXY_ENABLED == 1 ]]; then
    setproxy
else
    unsetproxy
fi
# check connection (with & without proxy)
check_connection() {
    (
        if command -v https &> /dev/null; then
            setproxy
            if ! https --print=h https://www.google.com 2> /dev/null | grep "HTTP/1.1 200 OK" &> /dev/null; then
                echo "Connection to Google [proxy enabled]: failed"
            else
                echo "Connection to Google [proxy enabled]: succeeded"
            fi
            unsetproxy
            if ! https --print=h https://www.aliyun.com 2> /dev/null | grep "HTTP/1.1 200 OK" &> /dev/null; then
                echo "Connection to Aliyun [proxy disabled]: failed"
            else
                echo "Connection to Aliyun [proxy disabled]: succeeded"
            fi
        fi
    )
}

# SKIP_SSL
if [[ $SKIP_SSL == 1 ]]; then
    export GIT_SSL_NO_VERIFY=true
    export TLDR_ALLOW_INSECURE=1
    alias curl="curl --insecure"
    alias wget="wget --no-check-certificate"
    alias aria2c="aria2c --check-certificate=false"
fi

# pueued
if command -v pueued &> /dev/null && [[ $PUEUED_AUTO_START == 1 ]]; then
    pueued -d &> /dev/null
fi

# rtx
if command -v rtx &> /dev/null && [[ $USE_RTX == 1 ]]; then
    eval "$(rtx activate zsh)" &> /dev/null
    # add completion
    rtx completion zsh | source /dev/stdin
    # use rtx python environment in nvim
    export PYTHON3_HOST_PROG="$(rtx which python)"
fi

if [[ -z ${PYTHON3_HOST_PROG} ]]; then
    export PYTHON3_HOST_PROG="$(which python3)"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('\"$HOME\"/mambaforge-pypy3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/mambaforge-pypy3/etc/profile.d/conda.sh" ]; then
        . "$HOME/mambaforge-pypy3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/mambaforge-pypy3/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "$HOME/mambaforge-pypy3/etc/profile.d/mamba.sh" ]; then
    . "$HOME/mambaforge-pypy3/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<
