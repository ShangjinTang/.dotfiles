######################################################################
# EXPORTS
#=====================================================================
# customized exports, can be overrided in ~/.zshrc.local file

# proxy (use 'setproxy/unsetproxy' to toggle proxy)
export PROXY_IP="127.0.0.1:1080"
export PROXY_ENABLED=1

# security setting
export SKIP_SSL=1

# terminal theme: light | dark
export TERMINAL_THEME='dark'
case ${TERMINAL_THEME} in
    light)
        export TERMINAL_TRANSPARENT=false
        ;;
    dark)
        export TERMINAL_TRANSPARENT=true
        ;;
esac

# nvim extensions
export NVIM_FORMAT_ON_SAVE=true
export NVIM_SHOW_DIAG_ON_HOVER=true
export NVIM_SHOW_DIAG_ON_HOVER_SERVERITY_MIN="warn"  # error/warn/info/hint

# python version
export PYTHON3_VERSION="3.10.11"

# python3_host_prog for python3 provider
if command -v pyenv &> /dev/null || [[ -f ~/.pyenv/bin/pyenv ]]; then
    export PYTHON3_HOST_PROG="$HOME/.pyenv/shims/python3"
else
    export PYTHON3_HOST_PROG="/usr/bin/python3"
fi

# For ChatGPT.nvim and 'sgpt' CLI command
# export OPENAI_API_KEY=""

#=====================================================================
# default exports which do not suggest to modify

export EDITOR=nvim
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8
export HISTFILESIZE=10000  # max size (KB) in history file, e.g. ~/.bash_history
export HISTSIZE=10000  # max size in command `history`
export HISTCONTROL=ignoreboth  # same as ignorespace:ignoredups

# Terminal Color
# xterm-256 color chart:
#   https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
export TERM=xterm-256color
# True Color for TMUX
export COLORTERM=truecolor

# zsh
export ZSH_DISABLE_COMPFIX=1
export skip_global_compinit=1

#=====================================================================
# exports for specific command line tool

# cmake
if command -v cmake &> /dev/null; then
    export CMAKE_EXPORT_COMPILE_COMMANDS=1
fi

# cscope
if command -v cscope &> /dev/null; then
    alias cscope="cscope -f ./cscope.out"
    alias cscopebuild="fd -e cpp -e cc -e c -e hpp -e h -e java > cscope.files && cscope -bkqv"
fi

# macchina
if command -v macchina &> /dev/null && [ -f ~/.config/macchina/themes/Lithium.toml ]; then
    alias macchina="macchina --theme Lithium"
    # alias override: check ip on the first non 'lo' (loopback) interface by 'ifconfig'
    if command -v ifconfig &> /dev/null; then
        local network_interface=$(ifconfig | grep -o '^[^ ]\+' | cut -d ":" -f 1 | grep -v 'lo' | head -n 1)
        if [ -n ${network_interface} ]; then
            alias macchina="macchina --theme Lithium -i ${network_interface}"
        fi
    fi
fi

# nnn
if command -v nnn &> /dev/null; then
    export NNN_FIFO="/tmp/nnn.fifo" # temporary buffer for the previews
    # nnn plugins reference: https://github.com/jarun/nnn/tree/master/plugins
    export NNN_PLUG='c:!code $nnn*;d:diffs;t:fzopen;p:preview-tui;z:autojump'
    nn()
    {
        if [ -z "$TMUX" ]; then
            nnn -e "$@"
        else
            nnn -e -P p "$@"
        fi
    }
    n() # to cd on quit
    {
        if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
            echo "nnn is already running"
            return
        fi
        export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
        if [ -z "$TMUX" ]; then
            nnn -e "$@"
        else
            nnn -e -P p "$@"
        fi
        if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
        fi
    }
fi

######################################################################
# FUNCTIONS

#=====================================================================
# functions for local use

_DIRCREATE() {
    for arg in "$@"; do
        if [ ! -d "$arg" ]; then
            mkdir -p "$arg"
        fi
    done
}

_PATHPREPEND() {
    for arg in "$@"; do
        if [ -d "$arg" ] && [[ ":$PATH:" != *":$arg:"* ]]; then
            PATH="$arg${PATH:+":$PATH"}"
        fi
    done
}

_PATHAPPEND() {
    for arg in "$@"; do
        if [ -d "$arg" ] && [[ ":$PATH:" != *":$arg:"* ]]; then
            PATH="${PATH:+"$PATH:"}$arg"
        fi
    done
}

#=====================================================================
# Dir create

# Create essential directories
_DIRCREATE ~/bin ~/temp ~/github ~/note ~/jupyter

# Create npm local directory for nvim lsp
# Reference: https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally#manually-change-npms-default-directory
_DIRCREATE ~/.npm-global/bin && _PATHAPPEND ~/.npm-global/bin && export NPM_CONFIG_PREFIX=~/.npm-global

# Create nvim persistent undo directory
_DIRCREATE ~/.cache/nvim/undo

#---------------------------------------------------------------------
# Path prepend

# For 'jdtls' on ArchLinux
_PATHPREPEND /usr/lib64/jvm/java-17-openjdk/bin

#---------------------------------------------------------------------
# Path append

_PATHAPPEND ~/bin
# cargo packages are much faster, do not modify it's order
_PATHAPPEND ~/.cargo/bin
_PATHAPPEND ~/.pyenv/bin
_PATHAPPEND ~/.go/bin
_PATHAPPEND ~/.local/bin
_PATHAPPEND ~/.local/share/nvim/mason/bin

#=====================================================================
# fuctions for command line use

# cdup : same as 'cd ..'
# cdup <N> (N=1~9): same as 'cd ../../..' (repeat N times)
# cdup <name>: find the nearest directory and cd into it (not support glob)
function cdup() {
    if [ $# -eq 0 ]; then
        cd ..
    elif [ $# -eq 1 ]; then
        if [[ $1 =~ '^[1-9]$' ]]; then
            local targetdir=""
            for i in {1..$1}; do
                targetdir+="../"
            done
            cd $targetdir
        elif [ $1 = '/' ]; then
            cd /
        else
            parentdir=${${PWD}%/*}/
            if [[ $parentdir == */$1/* ]]; then
                cd ${PWD%/$1/*}/$1
            fi
        fi
    fi
}
alias cu="cdup"

# cd to current/parent dirs which contains input filename
function cdup_to_exists() {
    if [ $# -eq 0 ]; then
        echo "fatal: please specify a pattern or directory, such as .root or .git"
    elif [ $# -eq 1 ]; then
        dir=${PWD}
        while [[ ! -e $dir/$1 ]] && [[ $dir != '/' ]]; do
            dir="$(dirname "$dir")"
        done
        if [[ ! -e $dir/$1 ]]; then
            echo "fatal: file $1 not found in current and parent dirs"
        else
            cd $dir
        fi
    fi
}
alias ce="cdup_to_exists"

# use fzf to scan 'wd' directories
if command -v _wdi &> /dev/null; then
    function wdi() {
        cd "$(_wdi "$*")"
    }
fi

# Theme settings
function set_theme() {
    unalias bat &> /dev/null
    unset NNN_FCOLORS
    case $1 in
        light)
            export TERMINAL_THEME="light"
            # bat: use `bat --list-thmes` to check available colors
            export BAT_THEME="OneHalfLight"
            export PROCS_THEME="light"
            # zsh-autosuggestions: https://github.com/zsh-users/zsh-autosuggestions#suggestion-highlight-style
            export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=252"  # default color: 8
            command -v r2 &> /dev/null && echo "eco default" > ~/.radare2rc
            ;;
        dark)
            export TERMINAL_THEME="dark"
            export BAT_THEME="OneHalfDark"
            export PROCS_THEME="dark"
            BLK="04" CHR="04" DIR="04" EXE="00" REG="00" HARDLINK="00" SYMLINK="06" MISSING="00" ORPHAN="01" FIFO="0F" SOCK="0F" OTHER="02"
            export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"
            export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=242"
            command -v r2 &> /dev/null && echo "eco onedark" > ~/.radare2rc
            ;;
        *)
            ;;
    esac
    alias bat="bat --theme=${BAT_THEME}"
    alias procs="procs --theme ${PROCS_THEME}"
    ln -sf ~/.dotfiles/configs/tmux/.tmux.conf.theme.${TERMINAL_THEME} ~/.tmux.conf.theme
}
alias setlight="set_theme light"
alias setdark="set_theme dark"

######################################################################
# ALIASES

# clear: do not delete scrollback buffer (requires: tput version >= 6.2)
if tput -x clear &> /dev/null; then
    alias clear='tput -x clear'
fi

# rg
alias rg='rg --smart-case'

# nvim -> v
if command -v nvim &> /dev/null; then
    alias v='nvim'
    alias vv='nvim ~/.config/nvim/{*.lua,*.vim,lua/*.lua}'
    alias vk='nvim ~/.config/nvim/lua/{plug-which-key.lua,LunarVim/lua/lvim/core/which-key.lua}'
    alias vz="nvim ~/.zshrc{.pre,,.local,.post}"
    alias vm="nvim ~/note/index.md"
    alias vclash="nvim ~/.config/clash/config.yaml"
fi

# asynctask -> task
alias asynctask='~/.local/share/nvim/site/pack/lazy/opt/asynctasks.vim/bin/asynctask'
alias task=asynctask
alias taski='~/.local/share/nvim/site/pack/lazy/opt/asynctasks.vim/bin/asynctask -f'
function vtask() {
    if [[ -f ".tasks.ini" ]]; then
        nvim -O2 .tasks.ini ~/.config/nvim/tasks.ini
    else
        # if '.tasks.ini' not exists in current folder, open it as second buffer
        nvim ~/.config/nvim/tasks.ini .tasks.ini
    fi
}

# exa -> e
if command -v exa &> /dev/null; then
    alias exa='exa --long --group-directories-first --time-style=long-iso --git --classify --modified'
    alias e='exa'
    alias ea='exa --all'
    alias esort='exa --sort=modified'
    alias et='exa --tree'
    alias e1='exa -1'
    alias e2='exa --tree --level=2'
    alias e3='exa --tree --level=3'
    alias e4='exa --tree --level=4'
    alias e5='exa --tree --level=5'
fi

# git -> g
if command -v git &> /dev/null; then
    alias g='git'
    alias gpristine='git reset --hard && git clean -dfx -e "cscope*" -e "tags"'
    alias gspristine='git submodule deinit --force --all && git submodule update --init'
    alias cg='cd $(git rev-parse --show-toplevel)'
    if command -v lazygit &> /dev/null; then
        alias gg='lazygit'
    fi
fi

# sgpt -> s
# alias s='sgpt'

# tmux -> t
if command -v tmux &> /dev/null; then
    function t() {
        # set default $session to $1 or 0 (if $1 not exist)
        local session="${1:-0}"
        if command -v tmuxinator &> /dev/null && [ -f ~/.tmuxinator/${session}.yml ]; then
            tmuxinator $session
        else
            if tmux has -t $session &> /dev/null; then
                if [ -z "$TMUX" ]; then
                    tmux attach -t $session
                else
                    tmux switch -t $session
                fi
            else
                if [ -z "$TMUX" ]; then
                    tmux new -s $session
                else
                    tmux new -s $session -d && tmux switch -t $session
                fi
            fi

        fi
    }
    alias tl='tmux list-sessions'
    # kill all sessions except session 0
    alias tk='tmux kill-session -at 0 &> /dev/null || tmux kill-server'
    # kill session 0
    alias tk0='tmux kill-session -t 0 &> /dev/null'
    # kill all sessions
    alias tka='tmux kill-server'
fi

# Use rg (ripgrep) as fzf's **<TAB> / CTRL-T backend
if command -v rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow --glob '!{.git,.repo,.cache,.vscode,.build,.clangd,build,bazel-*}/*' --glob '!{.cs_files,.project,.root,.workspace,compile_commands.json,cscope.*}' 2> /dev/null"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# fzf
# Reference: https://man.archlinux.org/man/community/fzf/fzf.1.en
if command -v fzf &> /dev/null; then
    export FZF_DEFAULT_OPTS="--bind left:preview-page-up,right:preview-page-down,ctrl-/:toggle-preview"
fi

######################################################################




######################################################################
