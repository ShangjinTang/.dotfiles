#!/usr/bin/env bash

echo "Executing install.post ..."

~/.dotfiles/scripts/bash/nerdfont_install RobotoMono FiraCode Mononoki VictorMono # IosevkaTerm JetbrainsMono UbuntuMono MPlus

# install nnn plugin if nnn exists
if command -v nnn &> /dev/null; then
    if [ ! -d "${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins" ] || [ -z "$(ls "${XDG_CONFIG_HOME:-$HOME/.config}"/nnn/plugins)" ]; then
        echo "installing nnn plugins"
        bash -c "$(curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs)"
    fi
fi

# install fzf if ~/.fzf/install exists
if ! command -v fzf &> /dev/null; then
    if [ -f ~/.fzf/install ]; then
        ~/.fzf/install --all --no-bash --no-fish
    fi
fi

# create symlinks from ~/.dotfiles.local/ to ~/
if [ -d ~/.dotfiles.local ]; then
    while IFS= read -r -d '' file; do
        ln -sf "$file" "$(echo "$file" | sed 's/\.dotfiles\.local\///')"
    done < <(find ~/.dotfiles.local -type f -print0)
fi

# install cargo packages
if command -v cargo &> /dev/null; then
    if ! cargo &> /dev/null; then
        if command -v rustup &> /dev/null; then
            rustup default stable
        fi
    fi
    CARGO_DEPENDENCIES=('cargo-nextest')
    for PACKAGE in "${CARGO_DEPENDENCIES[@]}"; do
        if ! command -v "${PACKAGE}" &> /dev/null; then
            echo "cargo: installing ${PACKAGE} ..."
            cargo install "${PACKAGE}" > /dev/null
        fi
    done
fi

# 'jdtls': lsp for java
if ! command -v jdtls &> /dev/null; then
    curl https://raw.githubusercontent.com/eruizc-dev/jdtls-launcher/master/install.sh | bash
fi

# copy files from to Windows Drive C:\
# if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null; then
#     rm -rf /mnt/c/.dotfiles &> /dev/null
#     if [ ! -f /mnt/c/.dotfiles ]; then
#         cp -rL ~/.dotfiles/windows /mnt/c/.dotfiles
#     fi
# fi

function apply_diff_for_submodule() {
    local target_folder=./submodules/"$1"
    local diff_list=(./submodules_diff/"$1"/*.diff)
    if [[ -d "$target_folder" ]]; then
        (cd "$target_folder" && git reset --hard HEAD &> /dev/null)
        for diff_file in "${diff_list[@]}"; do
            diff_file_realpath=$(realpath "$diff_file")
            (cd "$target_folder" && git apply "$diff_file_realpath" &> /dev/null)
            if [[ $? -eq 0 ]]; then
                echo "Apply patch $diff_file in folder $target_folder succeeded."
            else
                echo "Error: apply patch $diff_file in folder $target_folder failed."
            fi
        done
    fi
}
apply_diff_for_submodule fzf > /dev/null
apply_diff_for_submodule LunarVim > /dev/null
