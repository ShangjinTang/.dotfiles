#!/usr/bin/env python3

import logging
import os
import platform
import subprocess
import sys
import time
from typing import List, Optional

import hydra
import typer
from omegaconf import DictConfig, OmegaConf

__author__ = "Shangjin Tang"
__copyright__ = "Copyright 2023 Shangjin Tang"
__license__ = "GPL"
__version__ = "1.0.0"
__email__ = "shangjin.tang@gmail.com"

LOG_FORMAT = "%(asctime)s    %(levelname)s    %(filename)s:%(lineno)s\n%(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)

app = typer.Typer()


class Distribution:
    @staticmethod
    def retrive_distribution():
        if platform.system() == "Linux":
            with open("/etc/os-release", encoding="utf-8") as f:
                release_info = f.read()
                if "Ubuntu 22.04" in release_info:
                    return "Ubuntu 22.04"
        return ""

    @staticmethod
    def is_ubuntu_2204():
        return Distribution.retrive_distribution() == "Ubuntu 22.04"

    @staticmethod
    def is_ubuntu():
        return Distribution.retrive_distribution().startswith("Ubuntu")

    @staticmethod
    def fetch_install_command(packages_to_install):
        if Distribution.is_ubuntu() and packages_to_install:
            return ArchLinux.fetch_install_command(packages_to_install)
        return None

    @staticmethod
    def fetch_uninstall_command(packages_to_uninstall):
        if Distribution.is_ubuntu() and packages_to_uninstall:
            return ArchLinux.fetch_uninstall_command(packages_to_uninstall)
        return None


class ArchLinux:
    @staticmethod
    def fetch_install_command(packages_to_install):
        installed_packages = ArchLinux.query_installed_packages()
        packages_to_install = packages_to_install - installed_packages
        if not packages_to_install:
            return None
        logging.debug(f"{packages_to_install=}")
        install_command = " ".join(["sudo", "apt", "install", *packages_to_install])
        return install_command

    @staticmethod
    def fetch_uninstall_command(packages_to_uninstall):
        installed_packages = ArchLinux.query_installed_packages()
        packages_to_uninstall = packages_to_uninstall & installed_packages
        if not packages_to_uninstall:
            return None
        logging.debug(f"{packages_to_uninstall=}")
        uninstall_command = " ".join(
            ["sudo", "apt", "remove", "--auto-remove", *packages_to_uninstall]
        )
        return uninstall_command

    @staticmethod
    def query_installed_packages():
        result = subprocess.run(
            ["dpkg-query", "-W", "-f=${Package} "],
            stdout=subprocess.PIPE,
            check=False,
        )
        installed_packages = set(result.stdout.decode().strip().split(" "))
        return installed_packages


class PackageInstaller:
    def __init__(self, requirements, clean_install=False):
        if not Distribution.is_ubuntu():
            raise OSError("Only support Ubuntu")
        self.requirements = requirements
        self.clean_install = clean_install
        self.install_command = None
        self.uninstall_command = None
        self.packages_to_uninstall = None

    def install_requirements(self):
        if self.clean_install:
            self.packages_to_uninstall = set(
                k for k, v in self.requirements.items() if v is False
            )

    def update_install_command(self):
        packages_to_install = set(k for k, v in self.requirements.items() if v is True)
        self.install_command = Distribution.fetch_install_command(packages_to_install)
        # run apt update before install
        if self.install_command:
            self.install_command = "sudo apt update && " + self.install_command

    def update_uninstall_command(self):
        if self.clean_install:
            print(f"{self.clean_install=}")
            packages_to_uninstall = set(
                k for k, v in self.requirements.items() if v is False
            )
            self.uninstall_command = Distribution.fetch_uninstall_command(
                packages_to_uninstall
            )
            logging.info(self.uninstall_command)

    def execute_command(self):
        self.update_uninstall_command()
        self.update_install_command()
        command_to_execute = " && ".join(
            [
                valid_command
                for valid_command in [self.uninstall_command, self.install_command]
                if valid_command
            ]
        )
        if not command_to_execute:
            print("Already satisfied, no command need to be executed.")
            return
        logging.debug(command_to_execute)
        print(command_to_execute)
        time.sleep(3)
        os.system(command_to_execute)


def my_compose(overrides: Optional[List[str]]) -> DictConfig:
    with hydra.initialize(
        version_base=None,
        config_path=os.path.basename(sys.argv[0]) + "-conf",
        job_name="my_compose_job",
    ):
        return hydra.compose(config_name="config", overrides=overrides)


@app.command()
def install(
    overrides: Optional[List[str]] = typer.Argument(None),
    clean_install: bool = typer.Option(False, "--clean"),
):
    logging.debug(f"Got {overrides=}")
    cfg = my_compose(overrides)
    logging.debug(f"Hydra config (dict):\n{cfg}")
    logging.debug(f"Hydra config (yaml):\n{OmegaConf.to_yaml(cfg)}")
    package_requirements = {}
    for _, sub_dict in cfg.items():
        package_requirements.update(sub_dict)
    package_installer = PackageInstaller(package_requirements, clean_install)
    package_installer.execute_command()


@app.command()
def clean_install(overrides: Optional[List[str]] = typer.Argument(None)):
    install(overrides=overrides, clean_install=True)


@app.command()
def upgrade():
    command_to_execute = "sudo apt update && sudo apt upgrade"
    print(command_to_execute)
    os.system(command_to_execute)


if __name__ == "__main__":
    app()
