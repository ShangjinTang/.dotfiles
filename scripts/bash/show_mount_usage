#!/usr/bin/env bash

# Link: https://github.com/ralish/bash-script-template

# A best practices Bash script template with many useful functions. This file
# combines the source.sh & script.sh files into a single script. If you want
# your script to be entirely self-contained then this should be what you want!

# Enable xtrace if the DEBUG environment variable is set
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
    set -o xtrace       # Trace the execution of the script (debug)
fi

# Only enable these shell behaviours if we're not being sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2> /dev/null); then
    # A better class of script...
    set -o errexit      # Exit on most errors (see the manual)
    set -o nounset      # Disallow expansion of unset variables
    set -o pipefail     # Use last non-zero exit code in a pipeline
fi

# Enable errtrace or the error trap handler will not work as expected
set -o errtrace         # Ensure the error trap handler is inherited

# DESC: Usage help
# ARGS: None
# OUTS: None
function script_usage() {
    cat << EOF
Usage: $(basename "$0") [-v] [-nc] [-cr] [-t used|avail] [DIRECTORY]
Print the available size and precentage of filesystem which DIRECTORY belongs.
If no DIRECTORY is specified, use current directory "." as DIRECTORY.

Options:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
    -nc|--no-colour             Disables colour output
    -cr|--cron                  Run silently unless we encounter an error
     -t|--type used|avail       Show used | avail info (default: avail)
EOF
}

# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
function parse_params() {
    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -h | --help)
                script_usage
                exit 0
                ;;
            -v | --verbose)
                verbose=true
                ;;
            -nc | --no-colour)
                no_colour=true
                ;;
            -cr | --cron)
                cron=true
                ;;
            *)
                input_arg="$param"
                ;;
        esac
    done
}

function get_df() {
    local readonly DF_FIELD=$1
    local readonly CUR_DIR=$2
    local readonly CUR_FS=$(findmnt --target "$CUR_DIR" --output SOURCE --noheading)
    df -BG --output=source,"$DF_FIELD" | grep "$CUR_FS" | tr -s ' ' | cut -d ' ' -f 2
}

function show_mount_used() {
    local readonly CUR_DIR=$1
    local readonly USED=$(get_df used "$CUR_DIR")
    local readonly SIZE=$(get_df size "$CUR_DIR")
    local readonly USED_PCENT=$(get_df pcent "$CUR_DIR")
    echo "$USED/$SIZE"
}

# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: None
function main() {
    trap script_trap_err ERR
    # trap script_trap_exit EXIT

    script_init "$@"
    parse_params "$@"
    cron_init
    colour_init
    ##lock_init system

    verbose_print "Used/Size"
    if [[ -n ${input_arg-} ]]; then
        show_mount_used "${input_arg}"
    else
        show_mount_used .
    fi
}

# shellcheck source=source.sh
source "$(dirname "${BASH_SOURCE[0]}")/bash_source"

# Invoke main with args if not sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2> /dev/null); then
    main "$@"
fi

# vim: syntax=sh cc=120 tw=119 ts=4 sw=4 sts=4 et sr
