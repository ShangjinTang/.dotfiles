#!/usr/bin/env python3

import argparse
import logging
import multiprocessing
import os
import subprocess
import sys
import time
from shutil import rmtree, which

from packaging import version
from rich.console import Console
from rich.theme import Theme

__author__ = "Shangjin Tang"
__copyright__ = "Copyright 2024 Shangjin Tang"
__license__ = "GPL"
__version__ = "1.8.2"
__email__ = "shangjin.tang@gmail.com"

console = Console(theme=Theme(inherit=False))
cprint = console.print

LOGGING_FORMAT = "%(asctime)s [%(levelname)s] %(filename)s:%(lineno)d - %(message)s"
LOGGING_DATEFMT = "%Y-%m-%d %H:%M:%S"
logging.basicConfig(
    level=logging.INFO,
    format=LOGGING_FORMAT,
    datefmt=LOGGING_DATEFMT,
)


class UltimateHelpFormatter(
    argparse.RawTextHelpFormatter, argparse.ArgumentDefaultsHelpFormatter
):
    pass


def confirm_yes_or_no(question: str, default="yes"):
    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == "":
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' (or 'y' or 'n').\n")


def is_version_greater_or_equal(current_version: str, required_version: str) -> bool:
    try:
        return version.parse(current_version) >= version.parse(required_version)
    except version.InvalidVersion:
        return False


def get_version(
    command: str, version_arg: str = "--version", extract_field: int = -1
) -> str:
    try:
        result = subprocess.run(
            [command, version_arg], capture_output=True, text=True, check=True
        )
        output_lines = result.stdout.strip().split("\n")
        version_line = output_lines[0]
        version = version_line.split(" ")[extract_field]
        return version
    except (FileNotFoundError, subprocess.CalledProcessError):
        return ""


def check_conan_version(required_version: str) -> bool:
    if conan_version := get_version("conan"):
        if is_version_greater_or_equal(conan_version, required_version):
            # cprint(
            #     f"[cyan]INFO[/cyan] conan version {conan_version} >= {required_version}"
            # )
            return True
        else:
            cprint(
                f"[cyan]INFO[/cyan] conan version {conan_version} < {required_version}"
            )
            return False
    else:
        raise EnvironmentError("conan is not found or an error occurred.")


def validate_conan_version(required_version: str):
    if not check_conan_version(required_version):
        raise EnvironmentError(f"conan version < {required_version}")


def validate_vcpkg_install():
    if vcpkg_version := get_version("vcpkg"):
        cprint(f"vcpkg version {vcpkg_version}")
    else:
        raise EnvironmentError("vcpkg is not found or an error occurred.")

    if os.environ.get("VCPKG_ROOT") is None:
        raise EnvironmentError("$VCPKG_ROOT is not set")


def check_cmake_version(required_version: str) -> bool:
    if cmake_version := get_version("cmake"):
        if is_version_greater_or_equal(cmake_version, required_version):
            # cprint(
            #     f"[cyan]INFO[/cyan] cmake version {cmake_version} >= {required_version}"
            # )
            return True
        else:
            cprint(
                f"[cyan]INFO[/cyan] cmake version {cmake_version} < {required_version}"
            )
            return False
    else:
        raise EnvironmentError("cmake is not found or an error occurred.")


def validate_cmake_version(required_version: str):
    if not check_cmake_version(required_version):
        raise EnvironmentError(f"cmake version < {required_version}")


def validate_watchexec_install():
    if not get_version("watchexec", extract_field=1):
        raise EnvironmentError("watchexec is not found or an error occurred.")


# return True if:
#   either: conanfile.txt is newer than CMakeUserPresets.json
#   or: CMakeUserPresets.json doesn't exist
#   or: build/ doesn't exist
def should_run_conan_preset_install(build_type: str) -> bool:
    conanfile_path = os.path.join(os.getcwd(), "conanfile.txt")
    cmake_presets_path = os.path.join(os.getcwd(), "CMakeUserPresets.json")
    build_path = os.path.join(os.getcwd(), "build", build_type)

    if not os.path.exists(build_path):
        return True

    if not os.path.exists(cmake_presets_path):
        return True

    conanfile_mtime = os.path.getmtime(conanfile_path)
    cmake_presets_mtime = os.path.getmtime(cmake_presets_path)

    return conanfile_mtime > cmake_presets_mtime


def should_run_conan_install(build_type: str) -> bool:
    build_path = os.path.join(os.getcwd(), "build", build_type)
    if not os.path.exists(build_path):
        return True
    return False


def auto_complete_flag_list(args, unknown_args) -> list:
    default_def_configs = {
        "CMAKE_BUILD_TYPE": args.build_type if args.build_type else None,
        "BUILD_TESTING": "TRUE" if args.testing else None,
        "BUILD_SHARED_LIBS": "ON" if args.shared_libs else None,
    }
    merged_list = []
    for key, value in default_def_configs.items():
        if value:
            merged_list.append(f"-D{key}={value}")
    merged_list.extend([arg for arg in unknown_args if arg not in merged_list])
    return merged_list


def get_third_party_package_manager() -> str:
    is_conan = os.path.exists(os.path.join(os.getcwd(), "conanfile.txt"))
    is_vcpkg = os.path.exists(os.path.join(os.getcwd(), "vcpkg.json"))
    if is_conan and is_vcpkg:
        raise EnvironmentError(
            "Both vcpkg and conan configuration files are here, please remove one."
        )
    if is_vcpkg:
        return "vcpkg"
    if is_conan:
        return "conan"
    return ""


def main(args, unknown_args):
    # We use default build_type as "Debug"
    args.build_type = "Release" if args.release else "Debug"
    run_with_conan_preset = (
        args.preset
    )  # This requires cmake >= 3.23. If it's set to False, we always use lagacy conan_toolchain build
    if args.watch:
        validate_watchexec_install()
    if not which("cmake"):
        raise EnvironmentError("cmake not found. Please install it first.")
    if not os.path.exists(os.path.join(os.getcwd(), "CMakeLists.txt")):
        raise EnvironmentError(
            "CMakeLists.txt not found. Please execute it in a CMake project."
        )

    if args.clean_first:
        if os.path.exists(os.path.join(os.getcwd(), args.B)):
            rmtree(os.path.join(os.getcwd(), args.B))

    complete_flags = " ".join(auto_complete_flag_list(args, unknown_args))
    run_with_conan = False

    merged_commands_list = []
    create_build_dir_command = ""
    build_dir_with_type = f"{args.B}/{args.build_type}"
    if (
        run_with_conan_preset
        and get_third_party_package_manager() == "conan"
        and check_cmake_version("3.23")
    ):
        run_with_conan_preset = True
        run_with_conan = True
        validate_conan_version("2.0")
        if should_run_conan_preset_install(args.build_type):
            merged_commands_list.append(
                f"conan install . -s build_type={args.build_type} --build=missing"
            )
        create_build_dir_command = f"cmake --preset conan-{args.build_type.lower()}"
    else:
        run_with_conan_preset = False
        if get_third_party_package_manager() == "conan":
            run_with_conan = True
            validate_cmake_version("3.15")
            validate_conan_version("2.0")
            if should_run_conan_install(args.build_type):
                merged_commands_list.append(
                    f"conan install . -s build_type={args.build_type} --build=missing"
                )
            complete_flags += f" -DCMAKE_TOOLCHAIN_FILE={build_dir_with_type}/generators/conan_toolchain.cmake"
        elif get_third_party_package_manager() == "vcpkg":
            validate_cmake_version("3.15")
            validate_vcpkg_install()
            complete_flags += f" -DCMAKE_TOOLCHAIN_FILE={os.environ.get('VCPKG_ROOT')}/scripts/buildsystems/vcpkg.cmake"
        create_build_dir_command = f"cmake -S {args.S} -B {build_dir_with_type}"

    if args.G:
        create_build_dir_command += f" -G {args.G}"

    if complete_flags:
        create_build_dir_command += " " + complete_flags
        merged_commands_list.append(create_build_dir_command)
        # Copy compile_commands.json to current directory
        copy_compdb_command = (
            f"cp -f {build_dir_with_type}/compile_commands.json . &> /dev/null"
        )
        merged_commands_list.append(copy_compdb_command)

    build_command = ""
    if run_with_conan_preset:
        build_command = (
            f"cmake --build --preset conan-{args.build_type.lower()} -j {args.parallel}"
        )
    else:
        build_command = f"cmake --build {build_dir_with_type} --config {args.build_type} -j {args.parallel}"
    if args.targets:
        for target in args.targets:
            build_command += f" --target {target}"
    if args.verbose:
        build_command += " --verbose"
    merged_commands_list.append(build_command)

    if "-DBUILD_TESTING=TRUE" in complete_flags:
        ctest_command = f"ctest --test-dir build/{args.build_type}"
        merged_commands_list.append(ctest_command)

    # Get clean_last command (optional)
    if args.clean_last:
        output_top_dir = build_dir_with_type.split("/")[0]
        clean_command = f"rm -r ./{output_top_dir}"
        if run_with_conan:
            clean_command += " CMakeUserPresets.json"
        merged_commands_list.append(clean_command)

    # cmake + copy compdb + clean
    merged_commands = " && ".join(merged_commands_list)

    if args.watch:
        merged_commands = f"watchexec --watch={args.watch} --exts=c,cpp,cc,h,hpp,txt --shell=bash --stop-timeout=0 '{merged_commands}'"

    if args.dry_run:
        cprint(merged_commands)
        return

    if not args.watch:
        cprint(f"[green][Running: {merged_commands}][/green]")
        for index, command in enumerate(merged_commands_list):
            cprint(f"[magenta]{'=' * 70}\n{index+1}. {command}[/magenta]")
            try:
                subprocess.run(command, shell=True, check=True)
            except subprocess.CalledProcessError as e:
                cprint(f"[red][Command exited with {e.returncode}][/red]")
                exit(1)
        cprint(f"[green][Command was successful][/green]")
    else:
        # note:
        # 1. default '--shell=sh' errors on 'conan install ...', specify '--shell=bash' to avoid issue
        # 2. watch 'txt' to for CMakeLists.txt
        subprocess.run(merged_commands, shell=True, check=False)
        cprint(f"[green][Watch: {args.watch}][/green]")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=UltimateHelpFormatter)

    # >>> begin of cmake compatible settings >>>
    parser.add_argument("-S", default=".", help="cmake source directory\n")
    parser.add_argument("-B", default="build", help="cmake build directory\n")
    parser.add_argument(
        "-G",
        type=str,
        help="use cmake '-G' with generators (such as 'Ninja')\n",
    )
    parser.add_argument(
        "-j",
        "--parallel",
        default=f"{multiprocessing.cpu_count()}",
        help="parallel thread count for make\n",
    )
    parser.add_argument(
        "-t",
        "--targets",
        default=[],
        action="extend",
        nargs="+",
        help="targets to build",
    )
    # <<< end of cmake native settings <<<

    parser.add_argument(
        "-f",
        "--clean_first",
        default=False,
        action="store_true",
        help="force build: clean output directory before execution\n",
    )
    parser.add_argument(
        "-c",
        "--clean_last",
        default=False,
        action="store_true",
        help="clean output directory after execution\n",
    )
    parser.add_argument(
        "--preset",
        default=False,
        action="store_true",
        help="use cmake --preset (for conan)\nNote: this would let -S & -B not work",
    )

    build_type_mutex_group = parser.add_mutually_exclusive_group()
    build_type_mutex_group.add_argument(
        "--debug",
        default=False,
        action="store_true",
        help="cmake build debug (default)\n",
    )
    build_type_mutex_group.add_argument(
        "--release",
        default=False,
        action="store_true",
        help="cmake build release\n",
    )

    parser.add_argument(
        "--testing",
        default=False,
        action="store_true",
        help="add -DBUILD_TESTING=TRUE and run 'ctest' after build",
    )
    parser.add_argument(
        "--shared_libs",
        default=False,
        action="store_true",
        help="add -DBUILD_SHARED_LIBS=ON",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        default=False,
        action="store_true",
        help="enable verbose output",
    )
    parser.add_argument(
        "--watch",
        default="",
        help="files to watch (requires 'watchexec')",
    )
    parser.add_argument(
        "--dry-run",
        default=False,
        action="store_true",
    )

    try:
        args, unknown_args = parser.parse_known_args()
        # fix multiple argument parse in cmake
        processed_unknown_args = []
        for arg in unknown_args:
            if "=" in arg:
                key, value = arg.split("=", 1)
                processed_arg = f'{key}="{value}"'
                processed_unknown_args.append(processed_arg)
            else:
                processed_unknown_args.append(arg)
        main(args, processed_unknown_args)
    except KeyboardInterrupt:
        cprint("Interrupted")
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)
