#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
from typing import List, Optional

import yaml
from pydantic import BaseModel
from rich.console import Console

__author__ = "Shangjin Tang"
__copyright__ = "Copyright 2024 Shangjin Tang"
__license__ = "GPL"
__version__ = "1.1.0"
__email__ = "shangjin.tang@gmail.com"

console = Console()
cprint = console.print

DEFAULT_FILE_PATH = "~/.gh_repos.yaml"


class GitFlags(BaseModel):
    depth: Optional[int] = None
    branch: Optional[str] = None


class RepositoryInfo(BaseModel):
    repository: str
    directory: str
    gitflags: Optional[GitFlags] = None


def parse_yaml_file(file_path: str) -> List[RepositoryInfo]:
    with open(file_path, "r", encoding="utf-8") as file:
        data = yaml.safe_load(file)

    repositories = []
    for repo in data:
        repository = repo["repository"]
        directory = repo.get("directory")
        gitflags_data = repo.get("gitflags")
        gitflags = None
        if gitflags_data and isinstance(gitflags_data, dict):
            depth = gitflags_data.get("depth")
            branch = gitflags_data.get("branch")
            gitflags = GitFlags(depth=depth, branch=branch)
        repositories.append(
            RepositoryInfo(
                repository=repository, directory=directory, gitflags=gitflags
            )
        )

    return repositories


def force_delete_directory(directory: str):
    directory_expanduser = os.path.expanduser(directory)
    if os.path.exists(directory_expanduser):
        assert directory_expanduser != os.path.expanduser("~")
        shutil.rmtree(directory_expanduser)
        print(f"Directory '{directory}' is deleted.")


def check_git_repository_status(directory):
    try:
        git_status_output = subprocess.check_output(
            ["git", "status", "--porcelain"], cwd=directory
        ).decode("utf-8")
        if git_status_output.strip():
            return False

        git_stash_output = subprocess.check_output(
            ["git", "stash", "list"], cwd=directory
        ).decode("utf-8")
        if git_stash_output.strip():
            return False

        return True
    except subprocess.CalledProcessError:
        return False


def clone_repositories(repositories: List[RepositoryInfo], flag_sync: bool):
    repo_counts = len(repositories)
    for repo_index, repo in enumerate(repositories):
        if isinstance(repo, dict):
            repo = RepositoryInfo(**repo)
        repository = repo.repository
        directory = repo.directory
        directory_expanduser = os.path.expanduser(directory)
        gitflags = repo.gitflags
        branch = repo.gitflags.branch if repo.gitflags else None
        depth = repo.gitflags.depth if repo.gitflags else None

        assert repository
        assert directory

        cprint(f"\[{repo_index+1}/{repo_counts}]", "=" * 80)
        cprint(
            f"[magenta]Syncing github repository '{repository}' to directory '{directory}'[/magenta]"
        )

        command_list = ["gh", "repo", "clone", repository, directory_expanduser]
        if gitflags:
            command_list.append("--")
            if depth:
                command_list.append(f"--depth={depth}")
            if branch:
                command_list.append(f"--branch={branch}")
        if not os.path.exists(directory_expanduser):
            cprint(f"[green]{' '.join(command_list)}[/green]")
            subprocess.run(command_list, check=False)
            continue
        if not flag_sync:
            print(f"Skipping existing directory {directory}")
            continue
        if branch:
            existing_branches = subprocess.run(
                ["git", "branch"],
                cwd=directory_expanduser,
                capture_output=True,
                text=True,
            ).stdout
            existing_tags = subprocess.run(
                ["git", "tag"], cwd=directory_expanduser, capture_output=True, text=True
            ).stdout
            if branch in existing_branches:
                print(
                    f"Skipping sync for repository '{repo.repository}' as branch '{branch}' already exists."
                )
                continue
            if branch in existing_tags:
                print(
                    f"Skipping sync for repository '{repo.repository}' as tag '{branch}' already exists."
                )
                continue
        if gitflags and gitflags.branch:
            branch = gitflags.branch

            # Check if the repository has the specified branch
            output = subprocess.run(
                ["git", "branch", "--list", branch],
                cwd=directory,
                capture_output=True,
                text=True,
            )
            if output.returncode == 0 and output.stdout.strip() == f"* {branch}":
                cprint(
                    f"[green]Repository {repository} already on branch {branch}. Skipping sync.[/green]"
                )
                continue

            # Check if there are local changes or staged changes
            if not check_git_repository_status(directory):
                cprint(
                    f"[yellow]Repository {repository} has local changes or staged changes. Skipping sync.[/yellow]"
                )
                continue

            # Delete the directory and clone the repository with the specified branch
            force_delete_directory(directory)
            cprint(f"[green]{' '.join(command_list)}[/green]")
            subprocess.run(
                command_list,
                check=False,
            )
        else:
            # Check if there are local changes or staged changes
            if os.path.exists(directory) and not check_git_repository_status(directory):
                cprint(
                    f"[yellow]Repository {repository} has local changes or staged changes. Skipping sync.",
                )
                continue

            # Delete the directory and clone the repository
            force_delete_directory(directory)
            cprint(f"[green]{' '.join(command_list)}[/green]")
            subprocess.run(
                command_list,
                check=False,
            )


def main(args):
    if args.file == DEFAULT_FILE_PATH and not os.path.exists(
        os.path.expanduser(DEFAULT_FILE_PATH)
    ):
        print(
            f"""
Please create file {DEFAULT_FILE_PATH} with repository configs as below:

- repository: gh_user1/gh_repo1  # essential field
  directory: ~/gh/gh_repo1  # essential field
  gitflags:  # optional
    depth: 1  # optional
    branch: v1.0.0  # optional

- repository: gh_user2/gh_repo2  # essential field
  directory: ~/gh/gh_repo2  # essential field
"""
        )
        return

    file_path = os.path.expanduser(args.file)
    repositories = parse_yaml_file(file_path)

    clone_repositories(repositories, args.sync)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-f",
        "--file",
        default="~/.gh_repos.yaml",
        help="Specify the file to read repositories from",
    )
    parser.add_argument(
        "-s",
        "--sync",
        action="store_true",
        default=False,
        help="Try sync even if the directory already exists",
    )

    main(parser.parse_args())
