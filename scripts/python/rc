#!/usr/bin/env python3
"""
Dependencies:
    Python packages:
        python3 -m pip install "typer[all]"

    Binaries:
        rg: https://github.com/BurntSushi/ripgrep
        fd: https://github.com/sharkdp/fd
"""

import os
import platform
import subprocess
import sys
from shutil import which
from typing import List

import typer
from rich.console import Console

__author__ = "Shangjin Tang"
__copyright__ = "Copyright 2024 Shangjin Tang"
__license__ = "GPL"
__version__ = "2.1.1"
__email__ = "shangjin.tang@gmail.com"

console = Console()
cprint = console.print

FLAG_PATTERN = {
    "-ldl": "dlfcn.h",
    "-lm": "math.h",
    "-pthread": "pthread.h",
}


def get_flag_list_from_file(flag_file: str) -> List[str]:
    home_dir = os.path.expanduser("~")
    curr_dir = os.getcwd()
    flag_list = []
    while True:
        if os.path.isfile(os.path.join(curr_dir, flag_file)):
            with open(os.path.join(curr_dir, flag_file), encoding="UTF-8") as f:
                flag_list = [
                    line.strip()
                    for line in f.readlines()
                    if not line.strip().startswith("#")
                ]
                break
        if curr_dir in (home_dir, "/"):
            break
        curr_dir = os.path.dirname(curr_dir)
    return flag_list


def get_auto_complete_flag_list(files: List[str], flag_list: List[str]) -> List[str]:
    if which("rg"):
        for flag, pattern in FLAG_PATTERN.items():
            if flag not in flag_list:
                pattern_check_command = f"rg '^#include.*<{pattern}>'"
                if files:
                    pattern_check_command += " " + " ".join(files)
                else:
                    pattern_check_command += " --type c"
                retval = subprocess.call(
                    pattern_check_command,
                    shell=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
                if retval == 0:
                    cprint(f"add auto-detected flag [magenta]'{flag}'[/magenta]")
                    flag_list.append(flag)
    return flag_list


def compile_run_clean(
    files: List[str],
    compiler: str,
    flag_file: str,
    output: str,
    clean_output: bool,
    watchexec: bool,
) -> None:
    if not output.endswith(".out") and "." in output:
        raise ValueError(
            "Output file is allowed only with '.out' extension or no extension."
        )

    if not which(compiler):
        if not which("gcc"):
            raise EnvironmentError("Compiler clang / gcc not found.")
        compiler = "gcc"

    flag_list = get_flag_list_from_file(flag_file)
    flag_list = get_auto_complete_flag_list(files, flag_list)

    compile_command_list = [compiler, " ".join(flag_list), "-o", output]

    source_files = []
    # Generate compile command
    if files:
        # Specify type for file without extension. See: `man gcc` -> search "-x language"
        if not all(file.endswith(".c") for file in files):
            compile_command_list.extend(["-x", "c"])
        compile_command_list.extend(files)
    else:
        # Get all C files under the current directory
        source_files = [file for file in os.listdir(".") if file.endswith(".c")]
        if not source_files:
            cprint("[red]No C files found in the current directory.[/red]")
            return
        compile_command_list.extend(source_files)
    compile_command = " ".join(compile_command_list)

    # Get run command
    run_command = f"./{output}"

    merged_commands_list = [compile_command, run_command]

    # Get clean command (optional)
    if clean_output:
        clean_command = f"rm ./{output}"
        if platform.system() == "Darwin" and "-g" in flag_list:
            clean_command = f"rm -rf ./{output}" + "{,.dSYM}"
        merged_commands_list.append(clean_command)

    # compile + run + clean
    merged_commands = " && ".join(merged_commands_list)

    if watchexec:
        if files:
            merged_commands = f"watchexec --watch={','.join(files)} --shell=bash --stop-timeout=0 '{merged_commands}'"
        else:
            merged_commands = f"watchexec --exts=c,h --shell=bash --stop-timeout=0 '{merged_commands}'"
        subprocess.run(merged_commands, shell=True, check=False)
    else:
        cprint(f"[green][Running: {merged_commands}][/green]")
        ret = subprocess.run(merged_commands, shell=True, check=False)
        if ret.returncode != 0:
            cprint(f"[red][Command exited with {ret.returncode}][/red]")
        else:
            cprint(f"[green][Command was successful][/green]")


app = typer.Typer(add_completion=False)


@app.command(
    help="rc(Run C): A script to compile, build, run source files for C language"
)
def run(
    files: List[str] = typer.Argument(
        None,
        help="File(s) to compile; if not specified, use all C files under current directory",
    ),
    compiler: str = typer.Option(
        "clang",
        "--compiler",
        "-c",
        help="Compiler to use; if clang is not installed, use gcc",
    ),
    flag_file: str = typer.Option(
        ".rcflags",
        "--flag-file",
        "-f",
        help="Compile flag file (recursively find up to user home dir)",
    ),
    output: str = typer.Option(
        "a.out",
        "--output-file",
        "-o",
        help="Output executable file name",
    ),
    clean_output: bool = typer.Option(
        False,
        "--clean-output",
        help="Clean output file after run",
    ),
    watchexec: bool = typer.Option(
        False,
        "--watchexec",
        "-w",
        help="run with watchexec",
    ),
) -> None:
    try:
        compile_run_clean(files, compiler, flag_file, output, clean_output, watchexec)
    except KeyboardInterrupt:
        print("Interrupted")
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)


if __name__ == "__main__":
    app()
