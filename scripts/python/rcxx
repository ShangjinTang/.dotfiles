#!/usr/bin/env python3

import os
import platform
import subprocess
import sys
from shutil import which
from typing import List

import typer
from rich.console import Console

__author__ = "Shangjin Tang"
__copyright__ = "Copyright 2023 Shangjin Tang"
__license__ = "GPL"
__version__ = "2.0.0"
__email__ = "shangjin.tang@gmail.com"

console = Console()
cprint = console.print

FLAG_PATTERN = {
    "-fcoroutines": "coroutine",
    "-lbenchmark": "benchmark/\S+",
    "-ldl": "dlfcn.h",
    "-lfmt": "fmt/\S+",
    "-lgmock": "gmock/\S+",
    "-lgtest": "gtest/\S+",
    "-pthread": "pthread.h",
}


def get_flag_list_from_file(flag_file: str) -> List[str]:
    home_dir = os.path.expanduser("~")
    curr_dir = os.getcwd()
    flag_list = []
    while True:
        if os.path.isfile(os.path.join(curr_dir, flag_file)):
            with open(os.path.join(curr_dir, flag_file), encoding="UTF-8") as f:
                flag_list = [
                    line.strip()
                    for line in f.readlines()
                    if not line.strip().startswith("#")
                ]
                break
        if curr_dir in (home_dir, "/"):
            break
        curr_dir = os.path.dirname(curr_dir)
    return flag_list


def get_auto_complete_flag_list(file: List[str], flag_list: List[str]) -> List[str]:
    if which("rg"):
        for flag, pattern in FLAG_PATTERN.items():
            if flag not in flag_list:
                pattern_check_command = f"rg '^#include.*<{pattern}>'"
                if file:
                    pattern_check_command += " " + " ".join(file)
                else:
                    pattern_check_command += " --type cpp"
                retval = subprocess.call(
                    pattern_check_command,
                    shell=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
                if retval == 0:
                    cprint(f"add auto-detected flag [magenta]'{flag}'[/magenta]")
                    flag_list.append(flag)
    return flag_list


def compile_run_clean(
    file: List[str],
    compiler: str = "clang++",
    flag_file: str = ".rcxxflags",
    output: str = "a.out",
    clean_output: bool = False,
) -> None:
    if not output.endswith(".out") and "." in output:
        raise ValueError(
            "Output file is allowed only with '.out' extension or no extension."
        )

    if not which(compiler):
        if not which("g++"):
            raise EnvironmentError("Compiler clang++ / g++ not found.")
        compiler = "g++"

    flag_list = get_flag_list_from_file(flag_file)
    flag_list = get_auto_complete_flag_list(file, flag_list)

    compile_command_list = [compiler, " ".join(flag_list), "-o", output]

    # Generate compile command
    if file:
        # Specify type for file without extension. See: `man g++` -> search "-x language"
        if not all(file.endswith(".cpp") or file.endswith(".cc") for file in file):
            compile_command_list.extend(["-x", "c++"])
        compile_command_list.extend(file)
    else:
        # Get all CPP files under the current directory
        source_files = [
            file
            for file in os.listdir(".")
            if file.endswith(".cpp") or file.endswith(".cc")
        ]
        if not source_files:
            cprint("No CPP files found in the current directory.")
            return
        compile_command_list.extend(source_files)
    compile_command = " ".join(compile_command_list)

    # Get run command
    run_command = f"./{output}"

    merged_commands_list = [compile_command, run_command]

    # Get clean command (optional)
    if clean_output:
        clean_command = f"rm ./{output}"
        if platform.system() == "Darwin" and "-g" in flag_list:
            clean_command = f"rm -rf ./{output}" + "{,.dSYM}"
        merged_commands_list.append(clean_command)

    # compile + run + clean
    merged_commands = " && ".join(merged_commands_list)

    cprint(f"[green]{merged_commands}[/green]")
    print("-" * 70)
    os.system(merged_commands)
    print("-" * 70)


app = typer.Typer()


@app.command()
def run(
    file: List[str] = typer.Argument(
        None,
        help="File(s) to compile. If not specified, use all cpp files under current directory.",
    ),
    compiler: str = typer.Option(
        "clang++",
        "--compiler",
        "-c",
        help="Compiler to use; if clang++ is not installed, use g++.",
    ),
    flag_file: str = typer.Option(
        ".rcxxflags",
        "--flag-file",
        "-f",
        help="Compile flag file (recursively find up to user home dir).",
    ),
    output: str = typer.Option(
        "a.out",
        "--output-file",
        "-o",
        help="Output executable file name.",
    ),
    clean_output: bool = typer.Option(
        False,
        "--clean-output",
        "-c",
        help="Clean output after run.",
    ),
) -> None:
    try:
        compile_run_clean(file, compiler, flag_file, output, clean_output)
    except KeyboardInterrupt:
        print("Interrupted")
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)


if __name__ == "__main__":
    app()
