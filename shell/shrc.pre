######################################################################
# EXPORTS
#=====================================================================
# customized exports, can be overrided in ~/.*shrc.local file
# proxy
export PROXY_IP="127.0.0.1:1080"
export PROXY_ENABLED=1

# tmux
export TMUX_AUTO_LAUNCH=1

# security setting
export SKIP_SSL=1

# terminal theme
export TERMINAL_THEME='light'
# export TERMINAL_THEME='nord'
# export TERMINAL_THEME='dark'

# vim extensions
export VIM_COC_ENABLE=1
export VIM_CODEFMT_ENABLE=1
#=====================================================================
# default exports which do not suggest to modify

export EDITOR=vim
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8
export HISTFILESIZE=10000  # max size in history file, e.g. ~/.bash_history
export HISTSIZE=1000  # max size in command `history`
export HISTCONTROL=ignoreboth  # same as ignorespace:ignoredups

# Terminal Color
# xterm-256 color chart:
#   https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
export TERM=xterm-256color

# shell: zsh/bash
export SHELL_NAME="$(basename $SHELL)"
case ${SHELL_NAME} in
    bash)
        export IS_BASH=true
        export IS_ZSH=false
        ;;
    zsh)
        export IS_BASH=false
        export IS_ZSH=true ;;
esac
if $IS_ZSH; then
    export ZSH_DISABLE_COMPFIX=1
    export skip_global_compinit=1

    # session type to distinguish local or ssh(remote), for zsh theme
    export SESSION_TYPE=local
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        export SESSION_TYPE="ssh"
    else
        case $(ps -o comm= -p "$PPID") in
            sshd|*/sshd) export SESSION_TYPE="ssh";;
        esac
    fi
fi

#=====================================================================
# exports for specific command line tool

# cmake
if command -v cmake &> /dev/null; then
    export CMAKE_EXPORT_COMPILE_COMMANDS=1
fi

# https://github.com/rupa/z
if command -v z &> /dev/null; then
    export _Z_NO_RESOLVE_SYMLINKS=1
fi

if command -v nnn &> /dev/null; then
    export NNN_FIFO="/tmp/nnn.fifo" # temporary buffer for the previews
    # nnn plugins reference: https://github.com/jarun/nnn/tree/master/plugins
    export NNN_PLUG='d:diffs;t:fzopen;p:preview-tui;v:!code $nnn*;z:autojump'
    nn()
    {
        if [ -z "$TMUX" ]; then
            nnn -e "$@"
        else
            nnn -e -P p "$@"
        fi
    }
    n() # to cd on quit
    {
        if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
            echo "nnn is already running"
            return
        fi
        export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
        if [ -z "$TMUX" ]; then
            nnn -e "$@"
        else
            nnn -e -P p "$@"
        fi
        if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
        fi
    }
fi

######################################################################
# FUNCTIONS

#=====================================================================
# functions for local use

_PATHPREPEND() {
    for arg in "$@"; do
        if [ -d "$arg" ] && [[ ":$PATH:" != *":$arg:"* ]]; then
            PATH="$arg${PATH:+":$PATH"}"
        fi
    done
}
_PATHAPPEND() {
    for arg in "$@"; do
        if [ -d "$arg" ] && [[ ":$PATH:" != *":$arg:"* ]]; then
            PATH="${PATH:+"$PATH:"}$arg"
        fi
    done
}
_PATHAPPEND "$HOME/bin"
_PATHAPPEND "$HOME/.local/bin"

#=====================================================================
# fuctions for command line use

# cdup : same as 'cd ..'
# cdup <N> (N=1~9): same as 'cd ../../..' (repeat N times)
# cdup <name>: find the nearest directory and cd into it (not support glob)
function cdup() {
    if [ $# -eq 0 ]; then
        cd ..
    elif [ $# -eq 1 ]; then
        if [[ $1 =~ '^[1-9]$' ]]; then
            local targetdir=""
            for i in {1..$1}; do
                targetdir+="../"
            done
            cd $targetdir
        elif [ $1 = '/' ]; then
            cd /
        else
            parentdir=${${PWD}%/*}/
            if [[ $parentdir == */$1/* ]]; then
                cd ${PWD%/$1/*}/$1
            fi
        fi
    fi
}
alias cu="cdup"

# cd to current/parent dirs which contains input filename
function cdup_contain_file() {
    if [ $# -eq 0 ]; then
        echo "fatal: please specify a filename"
    elif [ $# -eq 1 ]; then
        dir=${PWD}
        while [[ ! -f $dir/$1 ]] && [[ $dir != '/' ]]; do
            dir="$(dirname "$dir")"
        done
        if [[ ! -f $dir/$1 ]]; then
            echo "fatal: file $1 not found in current and parent dirs"
        else
            cd $dir
        fi
    fi
}
alias cf="cdup_contain_file"

# use fzf to scan 'wd' directories
if command -v wd &> /dev/null && command -v _fzf_wd &> /dev/null; then
    function fzf_wd() {
        cd "$(_fzf_wd "$*")"
    }
fi

# light theme
function settheme() {
    unalias bat &> /dev/null
    unalias ncdu &> /dev/null
    unset NNN_FCOLORS
    case $1 in
        l|light)
            export TERMINAL_THEME="light"
            # bat: use `bat --list-thmes` to check available colors
            export BAT_THEME="OneHalfLight"
            export NCDU_THEME="dark"
            # zsh-autosuggestions: https://github.com/zsh-users/zsh-autosuggestions#suggestion-highlight-style
            $IS_ZSH && ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=252"  # default color: 8
            command -v r2 &> /dev/null && echo "eco default" > ~/.radare2rc
            ;;
        d|dark)
            export TERMINAL_THEME="dark"
            export BAT_THEME="OneHalfDark"
            export NCDU_THEME="dark-bg"
            BLK="04" CHR="04" DIR="04" EXE="00" REG="00" HARDLINK="00" SYMLINK="06" MISSING="00" ORPHAN="01" FIFO="0F" SOCK="0F" OTHER="02"
            export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"
            $IS_ZSH && export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=252"
            command -v r2 &> /dev/null && echo "eco onedark" > ~/.radare2rc
            ;;
        n|nord)
            export TERMINAL_THEME="nord"
            export BAT_THEME="OneHalfDark"
            export NCDU_THEME="dark-bg"
            BLK="0B" CHR="0B" DIR="04" EXE="06" REG="00" HARDLINK="06" SYMLINK="06" MISSING="00" ORPHAN="09" FIFO="06" SOCK="0B" OTHER="06"
            export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"
            test -r "~/.dir_colors" && eval $(dircolors ~/.dir_colors)
            $IS_ZSH && export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=239"
            command -v r2 &> /dev/null && echo "eco onedark" > ~/.radare2rc
            ;;
        *)
            ;;
    esac
    alias bat="bat --theme=${BAT_THEME}"
    alias ncdu="ncdu --color ${NCDU_THEME}"
    ln -sf ~/.dotfiles/configs/tmux/.tmux.conf.theme.${TERMINAL_THEME} ~/.tmux.conf.theme
    $IS_ZSH && source ~/.oh-my-zsh/custom/themes/sol.zsh-theme
}
alias setlight="settheme light"
alias setdark="settheme dark"
alias setnord="settheme nord"

######################################################################
# ALIASES

# grep
alias grep='grep --color=auto'

# clear: do not delete scrollback buffer (requires: tput version >= 6.2)
if tput -x clear &> /dev/null; then
    alias clear='tput -x clear'
fi

# rg
alias rg='rg --smart-case'

# vim
alias v='vim'
alias vv='vim ~/.vimrc'
alias vs="vim ~/.${SHELL_NAME}rc{.pre,,.local,.post}"

# git
alias g='git'
alias gpristine='git reset --hard && git clean -dfx -e "cscope*" -e "tags"'
alias cdgitroot='cd $(git rev-parse --show-cdup)'

# tmux
if command -v tmux &> /dev/null; then
    function t() {
        # set default $session to $1 or 0 (if $1 not exist)
        local session="${1:-0}"
        if command -v tmuxinator &> /dev/null && [ -f ~/.tmuxinator/${session}.yml ]; then
            tmuxinator $session
        else
            if tmux has -t $session &> /dev/null; then
                if [ -z "$TMUX" ]; then
                    tmux attach -t $session
                else
                    tmux switch -t $session
                fi
            else
                if [ -z "$TMUX" ]; then
                    tmux new -s $session
                else
                    tmux new -s $session -d && tmux switch -t $session
                fi
            fi

        fi
    }
    alias tl='tmux list-sessions'
    # kill all sessions except session 0
    alias tk='tmux kill-session -at 0 &> /dev/null || tmux kill-server'
    # kill session 0
    alias tk0='tmux kill-session -t 0 &> /dev/null'
    # kill all sessions
    alias tka='tmux kill-server'
fi

# tmuxinator
if command -v tmuxinator &> /dev/null; then
    alias mux=tmuxinator
fi

# Use rg (ripgrep) as fzf's **<TAB> / CTRL-T backend
if command -v rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow --glob '!{.git,.repo,.CMVolumes}/*' 2> /dev/null"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# fzf
# Reference: https://man.archlinux.org/man/community/fzf/fzf.1.en
if command -v fzf &> /dev/null; then
    export FZF_DEFAULT_OPTS="--bind left:preview-page-up,right:preview-page-down,alt-enter:toggle-preview"
fi

######################################################################


# 
# alias ssh-mypc="ssh -p 7603 shangjin@$BANDWAGON_IP"

######################################################################

